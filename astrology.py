"""
Astrology calculations and message generation for the Telegram bot.

This module provides a lightweight, offline implementation of astrological
transit analysis. For the sake of demonstration and reliability in
environments without internet access, the positions of the planets are
approximated using simple orbital period ratios rather than high precision
JPL ephemerides. Although the resulting transits are not suitable for
serious astrological work, they still allow us to generate varied and
entertaining horoscope messages.

Key functions:

* ``compute_natal_positions`` ‚Äì compute approximate natal positions of
  selected planets based on the user's birth date.
* ``compute_transit_differences`` ‚Äì compute the current angular distance
  between the natal positions and today's positions for each planet.
* ``generate_message`` ‚Äì build a motivational daily message from the
  computed transits, incorporating humour, spiritual guidance and
  inspirational quotes.

If you wish to use real planetary positions with high accuracy, replace
the simplified computations here with calls to the Skyfield library.
"""

from __future__ import annotations

import random
from datetime import date, datetime, timedelta
from typing import Dict, Tuple

import pytz

# Orbital periods in days for selected celestial bodies.  
# These values are approximate but sufficient for our purposes.
PLANET_PERIODS = {
    "Sun": 365.25,
    "Moon": 27.32,
    "Mercury": 88.0,
    "Venus": 224.7,
    "Mars": 687.0,
    "Jupiter": 4332.59,
    "Saturn": 10759.22,
}

# Lists of themes and suggestions for daily messages.  
# Feel free to expand these lists with additional items to enrich the
# variety of messages generated by the bot.
THEMES = [
    "–ì–∞—Ä–º–æ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ",
    "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞",
    "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
    "–ë–∞–ª–∞–Ω—Å –∏ —Å–æ–∑–µ—Ä—Ü–∞–Ω–∏–µ",
    "–°–≤–æ–±–æ–¥–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
    "–õ—é–±–æ–≤—å –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å",
    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ä–æ—Å—Ç",
]

ACTION_SUGGESTIONS = [
    "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è.",
    "–ü—Ä–æ–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–µ–¥–∏–Ω–µ —Å —Å–æ–±–æ–π.",
    "–°–¥–µ–ª–∞–π —Ç–æ, —á—Ç–æ –¥–∞–≤–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª(–∞).",
    "–ü–æ–¥–µ–ª–∏—Å—å —Ç–µ–ø–ª–æ–º —Å –±–ª–∏–∑–∫–∏–º–∏.",
    "–ó–∞–ø–∏—à–∏ —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –æ–Ω–∏ —É–∂–µ –æ—Å—É—â–µ—Å—Ç–≤–∏–ª–∏—Å—å.",
    "–°–¥–µ–ª–∞–π –Ω–µ–±–æ–ª—å—à–æ–π —à–∞–≥ –∫ –º–µ—á—Ç–µ.",
]

WARNING_SUGGESTIONS = [
    "–ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Ç—Ä–µ–≤–æ–≥—É.",
    "–ù–µ –ø–æ–∑–≤–æ–ª—è–π —Å–æ–º–Ω–µ–Ω–∏—è–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–±–æ–π.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–¥—ã—Ö–∞—Ç—å.",
    "–ù–µ –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞–π —Å–≤–æ–∏ —Å–∏–ª—ã.",
    "–ù–µ –∑–∞—Ç—è–≥–∏–≤–∞–π —Å –≤–∞–∂–Ω—ã–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏.",
]

RITUALS = [
    "–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –Ω–µ–±–æ –∏ –≤—Å–ø–æ–º–Ω–∏ —Ç—Ä–∏ —Å–≤–æ–∏—Ö –º–µ—á—Ç—ã.",
    "–ù–∞–ø–∏—à–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø—è—Ç—å –≤–µ—â–µ–π –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.",
    "–°–¥–µ–ª–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ –∏ —É–ª—ã–±–Ω–∏—Å—å.",
    "–ü–æ—Å–ª—É—à–∞–π –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É –∏ –ø–æ—Ç–∞–Ω—Ü—É–π.",
    "–ó–∞–ø–∏—à–∏ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫.",
]

MANTRAS = [
    "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—ë—Ç —Å–≤–æ–±–æ–¥—É.",
    "–Ø –∑–∞—Å–ª—É–∂–∏–≤–∞—é –≤—Å–µ–≥–æ –ª—É—á—à–µ–≥–æ.",
    "–ú–∏—Ä –æ—Ç—Ä–∞–∂–∞–µ—Ç –º–æ—ë –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
    "–õ—é–±–æ–≤—å ‚Äì —ç—Ç–æ –º–æ—è —Å–∏–ª–∞.",
    "–°–µ–≥–æ–¥–Ω—è —è –ø—Ä–∏–Ω–∏–º–∞—é —Å–µ–±—è –ø–æ–ª–Ω–æ—Å—Ç—å—é.",
]

# Quotes from the film "The Secret" (Rhonda Byrne) and the book "Happy Pocket Full of Money".  
# These inspirational excerpts are used to conclude each daily message.
QUOTES_SECRET = [
    "–ú—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ª—é–±—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ–≤–µ—Ä–∏–º –≤ –Ω–µ—ë.",
    "–ö–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ‚Äë—Ç–æ, –≤—Å—è –í—Å–µ–ª–µ–Ω–Ω–∞—è –±—É–¥–µ—Ç —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–º—É, —á—Ç–æ–±—ã –≤—ã —ç—Ç–æ –ø–æ–ª—É—á–∏–ª–∏.",
    "–ú—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è —Ç–µ–º, –æ —á—ë–º –¥—É–º–∞–µ–º.",
    "–ö–∞–∂–¥–∞—è –º—ã—Å–ª—å ‚Äì —ç—Ç–æ —ç–Ω–µ—Ä–≥–∏—è. –ò –∫–æ–≥–¥–∞ –≤—ã –¥—É–º–∞–µ—Ç–µ, –≤—ã –∏–∑–ª—É—á–∞–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏—é.",
]

QUOTES_MONEY = [
    "–î–µ–Ω—å–≥–∏ ‚Äì —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∞ —ç–Ω–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ª—é–±–∏—Ç —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –µ—ë.",
    "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —É–º–Ω–æ–∂–∞–µ—Ç –≤–∞—à–∏ –±–æ–≥–∞—Ç—Å—Ç–≤–∞.",
    "–í–∞—à–µ –±–æ–≥–∞—Ç—Å—Ç–≤–æ ‚Äì —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–≥–æ —É–º–∞.",
    "–û–±–∏–ª–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ —Ç–µ–º, –∫—Ç–æ –∏–∑–ª—É—á–∞–µ—Ç —Ä–∞–¥–æ—Å—Ç—å.",
]


def _days_since_epoch(d: date) -> int:
    """Return number of days since a fixed epoch (1 Jan 2000).

    We choose 2000‚Äë01‚Äë01 as a convenient epoch for calculations. The
    absolute choice is arbitrary since we only care about differences
    between dates.
    """
    epoch = date(2000, 1, 1)
    return (d - epoch).days


def _approximate_position(days: int, period: float) -> float:
    """Compute an approximate ecliptic longitude (in degrees) for a body.

    :param days: Number of days since epoch
    :param period: Orbital period in days
    :return: Angle in degrees on the [0, 360) interval
    """
    # Simple linear progression around the circle
    fraction = (days % period) / period
    return (fraction * 360.0) % 360.0


def compute_natal_positions(birth_date: str, birth_time: str) -> Dict[str, float]:
    """Compute approximate natal positions for selected planets.

    :param birth_date: Birth date in ISO format (YYYY‚ÄëMM‚ÄëDD)
    :param birth_time: Birth time in HH:MM format (24h)
    :return: Mapping from planet name to ecliptic longitude in degrees
    """
    dt = datetime.strptime(birth_date + " " + birth_time, "%Y-%m-%d %H:%M")
    d = dt.date()
    days = _days_since_epoch(d)
    positions: Dict[str, float] = {}
    for planet, period in PLANET_PERIODS.items():
        positions[planet] = _approximate_position(days, period)
    return positions


def compute_transit_differences(natal_positions: Dict[str, float], current_date: date) -> Dict[str, float]:
    """Compute angular differences between natal and current positions.

    :param natal_positions: Result of ``compute_natal_positions``
    :param current_date: Date for which to compute transits
    :return: Mapping from planet name to absolute angular distance in degrees
    """
    days_now = _days_since_epoch(current_date)
    differences: Dict[str, float] = {}
    for planet, natal_pos in natal_positions.items():
        period = PLANET_PERIODS[planet]
        current_pos = _approximate_position(days_now, period)
        diff = abs(current_pos - natal_pos)
        # Ensure difference is within [0, 180]
        if diff > 180.0:
            diff = 360.0 - diff
        differences[planet] = diff
    return differences


def _interpret_transit(diff: float) -> str:
    """Return a simple interpretation based on angular difference.

    Conjunctions (<10¬∞), oppositions (~180¬∞) and trines (~120¬∞) produce
    different types of energies. These interpretations are deliberately
    simplified for demonstration purposes.
    """
    if diff < 10.0:
        return "–∫–æ–Ω—ä—é–Ω–∫—Ü–∏—è"
    elif 170.0 <= diff <= 190.0:
        return "–æ–ø–ø–æ–∑–∏—Ü–∏—è"
    elif 110.0 <= diff <= 130.0:
        return "—Ç—Ä–∏–Ω"
    elif 80.0 <= diff <= 100.0:
        return "–∫–≤–∞–¥—Ä–∞—Ç"
    else:
        return "–∞—Å–ø–µ–∫—Ç"


def generate_message(name: str, natal_positions: Dict[str, float]) -> str:
    """Generate a daily horoscope message for the user.

    The message is built from several parts: a greeting, a theme of the day,
    interpretations of the most significant transit, suggestions for action
    and caution, a simple ritual, a mantra and a quote for reflection.

    :param name: User's first name for personalisation
    :param natal_positions: Natal planetary positions for the user
    :return: A formatted string ready to send via Telegram
    """
    today = date.today()
    diffs = compute_transit_differences(natal_positions, today)
    # Identify the planet with the smallest angular distance (strongest transit)
    planet, angle = min(diffs.items(), key=lambda item: item[1])
    interpretation = _interpret_transit(angle)
    # Construct the narrative pieces
    theme = random.choice(THEMES)
    actions = random.sample(ACTION_SUGGESTIONS, k=2)
    warnings = random.sample(WARNING_SUGGESTIONS, k=2)
    ritual = random.choice(RITUALS)
    mantra = random.choice(MANTRAS)
    quote = random.choice(QUOTES_SECRET + QUOTES_MONEY)
    # Compose the message in Russian similar to the provided example
    message_lines = [
        f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {name}!",  # greeting
        "",
        f"üßø –¢–µ–º–∞ –¥–Ω—è: ¬´{theme}¬ª. –ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ.",
        "",
        f"üåô –°–µ–≥–æ–¥–Ω—è {planet} –æ–±—Ä–∞–∑—É–µ—Ç {interpretation} —Å —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ–π.",
        "–û–Ω–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ—Å–æ–±—É—é —ç–Ω–µ—Ä–≥–∏—é ‚Äì –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –µ—ë.",
        "",
        "‚úÖ –î–µ–π—Å—Ç–≤—É–π:",
    ]
    for act in actions:
        message_lines.append(f"‚Ä¢ {act}")
    message_lines.append("")
    message_lines.append("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏:")
    for warn in warnings:
        message_lines.append(f"‚Ä¢ {warn}")
    message_lines.append("")
    message_lines.append("üïØÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª (5 –º–∏–Ω—É—Ç):")
    message_lines.append(ritual)
    message_lines.append("")
    message_lines.append("üí¨ –î–µ–≤–∏–∑ –¥–Ω—è:")
    message_lines.append(mantra)
    message_lines.append("")
    message_lines.append("‚ú® –¶–∏—Ç–∞—Ç–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:")
    message_lines.append(quote)
    return "\n".join(message_lines)
